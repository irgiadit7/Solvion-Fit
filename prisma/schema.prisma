// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String    @unique
  emailVerified   DateTime? 
  password        String
  role            Role      @default(USER) 
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  songs           Song[]
}

model Category {
  id           String        @id @default(cuid())
  name         String        @unique
  WorkoutPlan  WorkoutPlan[]
}

model WorkoutPlan {
  id              String   @id @default(cuid())
  title           String
  description     String
  coverImageUrl   String?
  difficulty      String
  durationMinutes Int
  equipmentNeeded String[]
  
  exercises       WorkoutPlanExercise[]
  category        Category @relation(fields: [categoryId], references: [id])
  categoryId      String
}

model Exercise {
  id                 String   @id @default(cuid())
  name               String   @unique
  description        String
  videoUrl           String?
  gifUrl             String?
  targetMuscles      String[]
  
  inPlans            WorkoutPlanExercise[]
}

model WorkoutPlanExercise {
  workoutPlan   WorkoutPlan @relation(fields: [workoutPlanId], references: [id])
  workoutPlanId String

  exercise      Exercise    @relation(fields: [exerciseId], references: [id])
  exerciseId    String

  order         Int
  sets          Int?
  reps          String?
  durationSecs  Int?
  restPeriodSecs Int?

  @@id([workoutPlanId, order])
}

model Song {
  id            String   @id @default(cuid())
  title         String
  description   String?
  songUrl       String   // Path ke file MP3 yang disimpan
  coverImageUrl String   // Path ke gambar cover yang disimpan
  uploadedAt    DateTime @default(now())

  // Relasi ke User (opsional, tapi sangat direkomendasikan)
  // Ini akan menghubungkan setiap lagu dengan user yang mengunggahnya
  userId        String
  user          User     @relation(fields: [userId], references: [id])
}